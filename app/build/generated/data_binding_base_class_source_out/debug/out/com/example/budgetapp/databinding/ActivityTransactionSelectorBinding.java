// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import androidx.viewpager2.widget.ViewPager2;
import com.example.budgetapp.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import com.google.android.material.tabs.TabLayout;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityTransactionSelectorBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton btnClearAll;

  @NonNull
  public final MaterialButton btnSelectAll;

  @NonNull
  public final ChipGroup chipGroup;

  @NonNull
  public final Chip chipRecurring;

  @NonNull
  public final Chip chipThisMonth;

  @NonNull
  public final TextInputEditText etSearch;

  @NonNull
  public final ExtendedFloatingActionButton fabSave;

  @NonNull
  public final TabLayout tabLayout;

  @NonNull
  public final MaterialToolbar toolbar;

  @NonNull
  public final TextView tvSelectionCount;

  @NonNull
  public final ViewPager2 viewPager;

  private ActivityTransactionSelectorBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton btnClearAll, @NonNull MaterialButton btnSelectAll,
      @NonNull ChipGroup chipGroup, @NonNull Chip chipRecurring, @NonNull Chip chipThisMonth,
      @NonNull TextInputEditText etSearch, @NonNull ExtendedFloatingActionButton fabSave,
      @NonNull TabLayout tabLayout, @NonNull MaterialToolbar toolbar,
      @NonNull TextView tvSelectionCount, @NonNull ViewPager2 viewPager) {
    this.rootView = rootView;
    this.btnClearAll = btnClearAll;
    this.btnSelectAll = btnSelectAll;
    this.chipGroup = chipGroup;
    this.chipRecurring = chipRecurring;
    this.chipThisMonth = chipThisMonth;
    this.etSearch = etSearch;
    this.fabSave = fabSave;
    this.tabLayout = tabLayout;
    this.toolbar = toolbar;
    this.tvSelectionCount = tvSelectionCount;
    this.viewPager = viewPager;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityTransactionSelectorBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityTransactionSelectorBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_transaction_selector, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityTransactionSelectorBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnClearAll;
      MaterialButton btnClearAll = ViewBindings.findChildViewById(rootView, id);
      if (btnClearAll == null) {
        break missingId;
      }

      id = R.id.btnSelectAll;
      MaterialButton btnSelectAll = ViewBindings.findChildViewById(rootView, id);
      if (btnSelectAll == null) {
        break missingId;
      }

      id = R.id.chipGroup;
      ChipGroup chipGroup = ViewBindings.findChildViewById(rootView, id);
      if (chipGroup == null) {
        break missingId;
      }

      id = R.id.chipRecurring;
      Chip chipRecurring = ViewBindings.findChildViewById(rootView, id);
      if (chipRecurring == null) {
        break missingId;
      }

      id = R.id.chipThisMonth;
      Chip chipThisMonth = ViewBindings.findChildViewById(rootView, id);
      if (chipThisMonth == null) {
        break missingId;
      }

      id = R.id.etSearch;
      TextInputEditText etSearch = ViewBindings.findChildViewById(rootView, id);
      if (etSearch == null) {
        break missingId;
      }

      id = R.id.fabSave;
      ExtendedFloatingActionButton fabSave = ViewBindings.findChildViewById(rootView, id);
      if (fabSave == null) {
        break missingId;
      }

      id = R.id.tabLayout;
      TabLayout tabLayout = ViewBindings.findChildViewById(rootView, id);
      if (tabLayout == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.tvSelectionCount;
      TextView tvSelectionCount = ViewBindings.findChildViewById(rootView, id);
      if (tvSelectionCount == null) {
        break missingId;
      }

      id = R.id.viewPager;
      ViewPager2 viewPager = ViewBindings.findChildViewById(rootView, id);
      if (viewPager == null) {
        break missingId;
      }

      return new ActivityTransactionSelectorBinding((CoordinatorLayout) rootView, btnClearAll,
          btnSelectAll, chipGroup, chipRecurring, chipThisMonth, etSearch, fabSave, tabLayout,
          toolbar, tvSelectionCount, viewPager);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

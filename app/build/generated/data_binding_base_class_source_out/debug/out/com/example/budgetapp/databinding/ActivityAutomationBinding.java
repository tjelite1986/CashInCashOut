// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import androidx.viewpager2.widget.ViewPager2;
import com.example.budgetapp.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.tabs.TabLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAutomationBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton buttonCreateEmergencyPlan;

  @NonNull
  public final MaterialButton buttonDetectPatterns;

  @NonNull
  public final MaterialButton buttonGenerateInsights;

  @NonNull
  public final MaterialButton buttonOptimizeBudget;

  @NonNull
  public final FloatingActionButton fabAddRule;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final RecyclerView recyclerViewInsights;

  @NonNull
  public final RecyclerView recyclerViewRules;

  @NonNull
  public final SwitchMaterial switchAutoInsights;

  @NonNull
  public final TabLayout tabLayout;

  @NonNull
  public final TextView textActiveRules;

  @NonNull
  public final TextView textHighPriorityInsights;

  @NonNull
  public final TextView textTotalUsage;

  @NonNull
  public final TextView textUnreadInsights;

  @NonNull
  public final Toolbar toolbar;

  @NonNull
  public final ViewPager2 viewPager;

  private ActivityAutomationBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton buttonCreateEmergencyPlan,
      @NonNull MaterialButton buttonDetectPatterns, @NonNull MaterialButton buttonGenerateInsights,
      @NonNull MaterialButton buttonOptimizeBudget, @NonNull FloatingActionButton fabAddRule,
      @NonNull ProgressBar progressBar, @NonNull RecyclerView recyclerViewInsights,
      @NonNull RecyclerView recyclerViewRules, @NonNull SwitchMaterial switchAutoInsights,
      @NonNull TabLayout tabLayout, @NonNull TextView textActiveRules,
      @NonNull TextView textHighPriorityInsights, @NonNull TextView textTotalUsage,
      @NonNull TextView textUnreadInsights, @NonNull Toolbar toolbar,
      @NonNull ViewPager2 viewPager) {
    this.rootView = rootView;
    this.buttonCreateEmergencyPlan = buttonCreateEmergencyPlan;
    this.buttonDetectPatterns = buttonDetectPatterns;
    this.buttonGenerateInsights = buttonGenerateInsights;
    this.buttonOptimizeBudget = buttonOptimizeBudget;
    this.fabAddRule = fabAddRule;
    this.progressBar = progressBar;
    this.recyclerViewInsights = recyclerViewInsights;
    this.recyclerViewRules = recyclerViewRules;
    this.switchAutoInsights = switchAutoInsights;
    this.tabLayout = tabLayout;
    this.textActiveRules = textActiveRules;
    this.textHighPriorityInsights = textHighPriorityInsights;
    this.textTotalUsage = textTotalUsage;
    this.textUnreadInsights = textUnreadInsights;
    this.toolbar = toolbar;
    this.viewPager = viewPager;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAutomationBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAutomationBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_automation, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAutomationBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonCreateEmergencyPlan;
      MaterialButton buttonCreateEmergencyPlan = ViewBindings.findChildViewById(rootView, id);
      if (buttonCreateEmergencyPlan == null) {
        break missingId;
      }

      id = R.id.buttonDetectPatterns;
      MaterialButton buttonDetectPatterns = ViewBindings.findChildViewById(rootView, id);
      if (buttonDetectPatterns == null) {
        break missingId;
      }

      id = R.id.buttonGenerateInsights;
      MaterialButton buttonGenerateInsights = ViewBindings.findChildViewById(rootView, id);
      if (buttonGenerateInsights == null) {
        break missingId;
      }

      id = R.id.buttonOptimizeBudget;
      MaterialButton buttonOptimizeBudget = ViewBindings.findChildViewById(rootView, id);
      if (buttonOptimizeBudget == null) {
        break missingId;
      }

      id = R.id.fabAddRule;
      FloatingActionButton fabAddRule = ViewBindings.findChildViewById(rootView, id);
      if (fabAddRule == null) {
        break missingId;
      }

      id = R.id.progressBar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.recyclerViewInsights;
      RecyclerView recyclerViewInsights = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewInsights == null) {
        break missingId;
      }

      id = R.id.recyclerViewRules;
      RecyclerView recyclerViewRules = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewRules == null) {
        break missingId;
      }

      id = R.id.switchAutoInsights;
      SwitchMaterial switchAutoInsights = ViewBindings.findChildViewById(rootView, id);
      if (switchAutoInsights == null) {
        break missingId;
      }

      id = R.id.tabLayout;
      TabLayout tabLayout = ViewBindings.findChildViewById(rootView, id);
      if (tabLayout == null) {
        break missingId;
      }

      id = R.id.textActiveRules;
      TextView textActiveRules = ViewBindings.findChildViewById(rootView, id);
      if (textActiveRules == null) {
        break missingId;
      }

      id = R.id.textHighPriorityInsights;
      TextView textHighPriorityInsights = ViewBindings.findChildViewById(rootView, id);
      if (textHighPriorityInsights == null) {
        break missingId;
      }

      id = R.id.textTotalUsage;
      TextView textTotalUsage = ViewBindings.findChildViewById(rootView, id);
      if (textTotalUsage == null) {
        break missingId;
      }

      id = R.id.textUnreadInsights;
      TextView textUnreadInsights = ViewBindings.findChildViewById(rootView, id);
      if (textUnreadInsights == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      id = R.id.viewPager;
      ViewPager2 viewPager = ViewBindings.findChildViewById(rootView, id);
      if (viewPager == null) {
        break missingId;
      }

      return new ActivityAutomationBinding((CoordinatorLayout) rootView, buttonCreateEmergencyPlan,
          buttonDetectPatterns, buttonGenerateInsights, buttonOptimizeBudget, fabAddRule,
          progressBar, recyclerViewInsights, recyclerViewRules, switchAutoInsights, tabLayout,
          textActiveRules, textHighPriorityInsights, textTotalUsage, textUnreadInsights, toolbar,
          viewPager);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetapp.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemProductWithPricesBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final MaterialButton buttonDelete;

  @NonNull
  public final MaterialButton buttonEdit;

  @NonNull
  public final MaterialButton buttonViewPrices;

  @NonNull
  public final TextView textViewAmountUnit;

  @NonNull
  public final TextView textViewBarcode;

  @NonNull
  public final TextView textViewDeposit;

  @NonNull
  public final TextView textViewDescription;

  @NonNull
  public final TextView textViewPrice;

  @NonNull
  public final TextView textViewPriceRange;

  @NonNull
  public final TextView textViewProductBrandName;

  @NonNull
  public final TextView textViewProductName;

  private ItemProductWithPricesBinding(@NonNull MaterialCardView rootView,
      @NonNull MaterialButton buttonDelete, @NonNull MaterialButton buttonEdit,
      @NonNull MaterialButton buttonViewPrices, @NonNull TextView textViewAmountUnit,
      @NonNull TextView textViewBarcode, @NonNull TextView textViewDeposit,
      @NonNull TextView textViewDescription, @NonNull TextView textViewPrice,
      @NonNull TextView textViewPriceRange, @NonNull TextView textViewProductBrandName,
      @NonNull TextView textViewProductName) {
    this.rootView = rootView;
    this.buttonDelete = buttonDelete;
    this.buttonEdit = buttonEdit;
    this.buttonViewPrices = buttonViewPrices;
    this.textViewAmountUnit = textViewAmountUnit;
    this.textViewBarcode = textViewBarcode;
    this.textViewDeposit = textViewDeposit;
    this.textViewDescription = textViewDescription;
    this.textViewPrice = textViewPrice;
    this.textViewPriceRange = textViewPriceRange;
    this.textViewProductBrandName = textViewProductBrandName;
    this.textViewProductName = textViewProductName;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemProductWithPricesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemProductWithPricesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_product_with_prices, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemProductWithPricesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonDelete;
      MaterialButton buttonDelete = ViewBindings.findChildViewById(rootView, id);
      if (buttonDelete == null) {
        break missingId;
      }

      id = R.id.buttonEdit;
      MaterialButton buttonEdit = ViewBindings.findChildViewById(rootView, id);
      if (buttonEdit == null) {
        break missingId;
      }

      id = R.id.buttonViewPrices;
      MaterialButton buttonViewPrices = ViewBindings.findChildViewById(rootView, id);
      if (buttonViewPrices == null) {
        break missingId;
      }

      id = R.id.textViewAmountUnit;
      TextView textViewAmountUnit = ViewBindings.findChildViewById(rootView, id);
      if (textViewAmountUnit == null) {
        break missingId;
      }

      id = R.id.textViewBarcode;
      TextView textViewBarcode = ViewBindings.findChildViewById(rootView, id);
      if (textViewBarcode == null) {
        break missingId;
      }

      id = R.id.textViewDeposit;
      TextView textViewDeposit = ViewBindings.findChildViewById(rootView, id);
      if (textViewDeposit == null) {
        break missingId;
      }

      id = R.id.textViewDescription;
      TextView textViewDescription = ViewBindings.findChildViewById(rootView, id);
      if (textViewDescription == null) {
        break missingId;
      }

      id = R.id.textViewPrice;
      TextView textViewPrice = ViewBindings.findChildViewById(rootView, id);
      if (textViewPrice == null) {
        break missingId;
      }

      id = R.id.textViewPriceRange;
      TextView textViewPriceRange = ViewBindings.findChildViewById(rootView, id);
      if (textViewPriceRange == null) {
        break missingId;
      }

      id = R.id.textViewProductBrandName;
      TextView textViewProductBrandName = ViewBindings.findChildViewById(rootView, id);
      if (textViewProductBrandName == null) {
        break missingId;
      }

      id = R.id.textViewProductName;
      TextView textViewProductName = ViewBindings.findChildViewById(rootView, id);
      if (textViewProductName == null) {
        break missingId;
      }

      return new ItemProductWithPricesBinding((MaterialCardView) rootView, buttonDelete, buttonEdit,
          buttonViewPrices, textViewAmountUnit, textViewBarcode, textViewDeposit,
          textViewDescription, textViewPrice, textViewPriceRange, textViewProductBrandName,
          textViewProductName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

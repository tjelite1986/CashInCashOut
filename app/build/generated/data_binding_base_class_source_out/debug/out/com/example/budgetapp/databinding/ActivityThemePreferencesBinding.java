// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetapp.R;
import com.google.android.material.floatingactionbutton.ExtendedFloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityThemePreferencesBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final ExtendedFloatingActionButton fabApply;

  @NonNull
  public final LinearLayout layoutPreview;

  @NonNull
  public final LinearLayout layoutSystemColor;

  @NonNull
  public final RadioButton radioColorful;

  @NonNull
  public final RadioButton radioDark;

  @NonNull
  public final RadioGroup radioGroupInterfaceStyle;

  @NonNull
  public final RadioGroup radioGroupThemeMode;

  @NonNull
  public final RadioButton radioLight;

  @NonNull
  public final RadioButton radioMaterial;

  @NonNull
  public final RadioButton radioSystem;

  @NonNull
  public final RadioButton radioSystemColor;

  @NonNull
  public final RecyclerView recyclerViewColors;

  @NonNull
  public final Toolbar toolbar;

  private ActivityThemePreferencesBinding(@NonNull CoordinatorLayout rootView,
      @NonNull ExtendedFloatingActionButton fabApply, @NonNull LinearLayout layoutPreview,
      @NonNull LinearLayout layoutSystemColor, @NonNull RadioButton radioColorful,
      @NonNull RadioButton radioDark, @NonNull RadioGroup radioGroupInterfaceStyle,
      @NonNull RadioGroup radioGroupThemeMode, @NonNull RadioButton radioLight,
      @NonNull RadioButton radioMaterial, @NonNull RadioButton radioSystem,
      @NonNull RadioButton radioSystemColor, @NonNull RecyclerView recyclerViewColors,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.fabApply = fabApply;
    this.layoutPreview = layoutPreview;
    this.layoutSystemColor = layoutSystemColor;
    this.radioColorful = radioColorful;
    this.radioDark = radioDark;
    this.radioGroupInterfaceStyle = radioGroupInterfaceStyle;
    this.radioGroupThemeMode = radioGroupThemeMode;
    this.radioLight = radioLight;
    this.radioMaterial = radioMaterial;
    this.radioSystem = radioSystem;
    this.radioSystemColor = radioSystemColor;
    this.recyclerViewColors = recyclerViewColors;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityThemePreferencesBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityThemePreferencesBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_theme_preferences, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityThemePreferencesBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.fab_apply;
      ExtendedFloatingActionButton fabApply = ViewBindings.findChildViewById(rootView, id);
      if (fabApply == null) {
        break missingId;
      }

      id = R.id.layout_preview;
      LinearLayout layoutPreview = ViewBindings.findChildViewById(rootView, id);
      if (layoutPreview == null) {
        break missingId;
      }

      id = R.id.layout_system_color;
      LinearLayout layoutSystemColor = ViewBindings.findChildViewById(rootView, id);
      if (layoutSystemColor == null) {
        break missingId;
      }

      id = R.id.radio_colorful;
      RadioButton radioColorful = ViewBindings.findChildViewById(rootView, id);
      if (radioColorful == null) {
        break missingId;
      }

      id = R.id.radio_dark;
      RadioButton radioDark = ViewBindings.findChildViewById(rootView, id);
      if (radioDark == null) {
        break missingId;
      }

      id = R.id.radio_group_interface_style;
      RadioGroup radioGroupInterfaceStyle = ViewBindings.findChildViewById(rootView, id);
      if (radioGroupInterfaceStyle == null) {
        break missingId;
      }

      id = R.id.radio_group_theme_mode;
      RadioGroup radioGroupThemeMode = ViewBindings.findChildViewById(rootView, id);
      if (radioGroupThemeMode == null) {
        break missingId;
      }

      id = R.id.radio_light;
      RadioButton radioLight = ViewBindings.findChildViewById(rootView, id);
      if (radioLight == null) {
        break missingId;
      }

      id = R.id.radio_material;
      RadioButton radioMaterial = ViewBindings.findChildViewById(rootView, id);
      if (radioMaterial == null) {
        break missingId;
      }

      id = R.id.radio_system;
      RadioButton radioSystem = ViewBindings.findChildViewById(rootView, id);
      if (radioSystem == null) {
        break missingId;
      }

      id = R.id.radio_system_color;
      RadioButton radioSystemColor = ViewBindings.findChildViewById(rootView, id);
      if (radioSystemColor == null) {
        break missingId;
      }

      id = R.id.recycler_view_colors;
      RecyclerView recyclerViewColors = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewColors == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityThemePreferencesBinding((CoordinatorLayout) rootView, fabApply,
          layoutPreview, layoutSystemColor, radioColorful, radioDark, radioGroupInterfaceStyle,
          radioGroupThemeMode, radioLight, radioMaterial, radioSystem, radioSystemColor,
          recyclerViewColors, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

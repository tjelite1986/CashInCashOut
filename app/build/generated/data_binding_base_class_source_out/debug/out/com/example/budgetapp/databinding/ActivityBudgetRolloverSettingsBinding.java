// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetapp.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBudgetRolloverSettingsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton buttonPreviewRollover;

  @NonNull
  public final MaterialButton buttonResetSettings;

  @NonNull
  public final MaterialButton buttonTriggerRollover;

  @NonNull
  public final AutoCompleteTextView dropdownBehavior;

  @NonNull
  public final AutoCompleteTextView dropdownStrategy;

  @NonNull
  public final TextInputEditText editFixedAmount;

  @NonNull
  public final TextInputEditText editMinimumAmount;

  @NonNull
  public final TextInputEditText editPercentage;

  @NonNull
  public final TextInputEditText editWeight;

  @NonNull
  public final MaterialCardView layoutActions;

  @NonNull
  public final MaterialCardView layoutAmountSettings;

  @NonNull
  public final MaterialCardView layoutBehaviorSettings;

  @NonNull
  public final TextInputLayout layoutFixedAmountSettings;

  @NonNull
  public final LinearLayout layoutPercentageSettings;

  @NonNull
  public final MaterialCardView layoutPeriodSettings;

  @NonNull
  public final MaterialCardView layoutStrategySettings;

  @NonNull
  public final TextInputLayout layoutWeightSettings;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final SwitchMaterial switchAutoRollover;

  @NonNull
  public final SwitchMaterial switchMonthly;

  @NonNull
  public final SwitchMaterial switchQuarterly;

  @NonNull
  public final SwitchMaterial switchRolloverEnabled;

  @NonNull
  public final SwitchMaterial switchRolloverNotifications;

  @NonNull
  public final SwitchMaterial switchWeekly;

  @NonNull
  public final SwitchMaterial switchYearly;

  @NonNull
  public final TextView textBehaviorDescription;

  @NonNull
  public final TextView textStrategyDescription;

  @NonNull
  public final Toolbar toolbar;

  private ActivityBudgetRolloverSettingsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton buttonPreviewRollover, @NonNull MaterialButton buttonResetSettings,
      @NonNull MaterialButton buttonTriggerRollover, @NonNull AutoCompleteTextView dropdownBehavior,
      @NonNull AutoCompleteTextView dropdownStrategy, @NonNull TextInputEditText editFixedAmount,
      @NonNull TextInputEditText editMinimumAmount, @NonNull TextInputEditText editPercentage,
      @NonNull TextInputEditText editWeight, @NonNull MaterialCardView layoutActions,
      @NonNull MaterialCardView layoutAmountSettings,
      @NonNull MaterialCardView layoutBehaviorSettings,
      @NonNull TextInputLayout layoutFixedAmountSettings,
      @NonNull LinearLayout layoutPercentageSettings,
      @NonNull MaterialCardView layoutPeriodSettings,
      @NonNull MaterialCardView layoutStrategySettings,
      @NonNull TextInputLayout layoutWeightSettings, @NonNull ProgressBar progressBar,
      @NonNull SwitchMaterial switchAutoRollover, @NonNull SwitchMaterial switchMonthly,
      @NonNull SwitchMaterial switchQuarterly, @NonNull SwitchMaterial switchRolloverEnabled,
      @NonNull SwitchMaterial switchRolloverNotifications, @NonNull SwitchMaterial switchWeekly,
      @NonNull SwitchMaterial switchYearly, @NonNull TextView textBehaviorDescription,
      @NonNull TextView textStrategyDescription, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.buttonPreviewRollover = buttonPreviewRollover;
    this.buttonResetSettings = buttonResetSettings;
    this.buttonTriggerRollover = buttonTriggerRollover;
    this.dropdownBehavior = dropdownBehavior;
    this.dropdownStrategy = dropdownStrategy;
    this.editFixedAmount = editFixedAmount;
    this.editMinimumAmount = editMinimumAmount;
    this.editPercentage = editPercentage;
    this.editWeight = editWeight;
    this.layoutActions = layoutActions;
    this.layoutAmountSettings = layoutAmountSettings;
    this.layoutBehaviorSettings = layoutBehaviorSettings;
    this.layoutFixedAmountSettings = layoutFixedAmountSettings;
    this.layoutPercentageSettings = layoutPercentageSettings;
    this.layoutPeriodSettings = layoutPeriodSettings;
    this.layoutStrategySettings = layoutStrategySettings;
    this.layoutWeightSettings = layoutWeightSettings;
    this.progressBar = progressBar;
    this.switchAutoRollover = switchAutoRollover;
    this.switchMonthly = switchMonthly;
    this.switchQuarterly = switchQuarterly;
    this.switchRolloverEnabled = switchRolloverEnabled;
    this.switchRolloverNotifications = switchRolloverNotifications;
    this.switchWeekly = switchWeekly;
    this.switchYearly = switchYearly;
    this.textBehaviorDescription = textBehaviorDescription;
    this.textStrategyDescription = textStrategyDescription;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBudgetRolloverSettingsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBudgetRolloverSettingsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_budget_rollover_settings, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBudgetRolloverSettingsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.button_preview_rollover;
      MaterialButton buttonPreviewRollover = ViewBindings.findChildViewById(rootView, id);
      if (buttonPreviewRollover == null) {
        break missingId;
      }

      id = R.id.button_reset_settings;
      MaterialButton buttonResetSettings = ViewBindings.findChildViewById(rootView, id);
      if (buttonResetSettings == null) {
        break missingId;
      }

      id = R.id.button_trigger_rollover;
      MaterialButton buttonTriggerRollover = ViewBindings.findChildViewById(rootView, id);
      if (buttonTriggerRollover == null) {
        break missingId;
      }

      id = R.id.dropdown_behavior;
      AutoCompleteTextView dropdownBehavior = ViewBindings.findChildViewById(rootView, id);
      if (dropdownBehavior == null) {
        break missingId;
      }

      id = R.id.dropdown_strategy;
      AutoCompleteTextView dropdownStrategy = ViewBindings.findChildViewById(rootView, id);
      if (dropdownStrategy == null) {
        break missingId;
      }

      id = R.id.edit_fixed_amount;
      TextInputEditText editFixedAmount = ViewBindings.findChildViewById(rootView, id);
      if (editFixedAmount == null) {
        break missingId;
      }

      id = R.id.edit_minimum_amount;
      TextInputEditText editMinimumAmount = ViewBindings.findChildViewById(rootView, id);
      if (editMinimumAmount == null) {
        break missingId;
      }

      id = R.id.edit_percentage;
      TextInputEditText editPercentage = ViewBindings.findChildViewById(rootView, id);
      if (editPercentage == null) {
        break missingId;
      }

      id = R.id.edit_weight;
      TextInputEditText editWeight = ViewBindings.findChildViewById(rootView, id);
      if (editWeight == null) {
        break missingId;
      }

      id = R.id.layout_actions;
      MaterialCardView layoutActions = ViewBindings.findChildViewById(rootView, id);
      if (layoutActions == null) {
        break missingId;
      }

      id = R.id.layout_amount_settings;
      MaterialCardView layoutAmountSettings = ViewBindings.findChildViewById(rootView, id);
      if (layoutAmountSettings == null) {
        break missingId;
      }

      id = R.id.layout_behavior_settings;
      MaterialCardView layoutBehaviorSettings = ViewBindings.findChildViewById(rootView, id);
      if (layoutBehaviorSettings == null) {
        break missingId;
      }

      id = R.id.layout_fixed_amount_settings;
      TextInputLayout layoutFixedAmountSettings = ViewBindings.findChildViewById(rootView, id);
      if (layoutFixedAmountSettings == null) {
        break missingId;
      }

      id = R.id.layout_percentage_settings;
      LinearLayout layoutPercentageSettings = ViewBindings.findChildViewById(rootView, id);
      if (layoutPercentageSettings == null) {
        break missingId;
      }

      id = R.id.layout_period_settings;
      MaterialCardView layoutPeriodSettings = ViewBindings.findChildViewById(rootView, id);
      if (layoutPeriodSettings == null) {
        break missingId;
      }

      id = R.id.layout_strategy_settings;
      MaterialCardView layoutStrategySettings = ViewBindings.findChildViewById(rootView, id);
      if (layoutStrategySettings == null) {
        break missingId;
      }

      id = R.id.layout_weight_settings;
      TextInputLayout layoutWeightSettings = ViewBindings.findChildViewById(rootView, id);
      if (layoutWeightSettings == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.switch_auto_rollover;
      SwitchMaterial switchAutoRollover = ViewBindings.findChildViewById(rootView, id);
      if (switchAutoRollover == null) {
        break missingId;
      }

      id = R.id.switch_monthly;
      SwitchMaterial switchMonthly = ViewBindings.findChildViewById(rootView, id);
      if (switchMonthly == null) {
        break missingId;
      }

      id = R.id.switch_quarterly;
      SwitchMaterial switchQuarterly = ViewBindings.findChildViewById(rootView, id);
      if (switchQuarterly == null) {
        break missingId;
      }

      id = R.id.switch_rollover_enabled;
      SwitchMaterial switchRolloverEnabled = ViewBindings.findChildViewById(rootView, id);
      if (switchRolloverEnabled == null) {
        break missingId;
      }

      id = R.id.switch_rollover_notifications;
      SwitchMaterial switchRolloverNotifications = ViewBindings.findChildViewById(rootView, id);
      if (switchRolloverNotifications == null) {
        break missingId;
      }

      id = R.id.switch_weekly;
      SwitchMaterial switchWeekly = ViewBindings.findChildViewById(rootView, id);
      if (switchWeekly == null) {
        break missingId;
      }

      id = R.id.switch_yearly;
      SwitchMaterial switchYearly = ViewBindings.findChildViewById(rootView, id);
      if (switchYearly == null) {
        break missingId;
      }

      id = R.id.text_behavior_description;
      TextView textBehaviorDescription = ViewBindings.findChildViewById(rootView, id);
      if (textBehaviorDescription == null) {
        break missingId;
      }

      id = R.id.text_strategy_description;
      TextView textStrategyDescription = ViewBindings.findChildViewById(rootView, id);
      if (textStrategyDescription == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityBudgetRolloverSettingsBinding((CoordinatorLayout) rootView,
          buttonPreviewRollover, buttonResetSettings, buttonTriggerRollover, dropdownBehavior,
          dropdownStrategy, editFixedAmount, editMinimumAmount, editPercentage, editWeight,
          layoutActions, layoutAmountSettings, layoutBehaviorSettings, layoutFixedAmountSettings,
          layoutPercentageSettings, layoutPeriodSettings, layoutStrategySettings,
          layoutWeightSettings, progressBar, switchAutoRollover, switchMonthly, switchQuarterly,
          switchRolloverEnabled, switchRolloverNotifications, switchWeekly, switchYearly,
          textBehaviorDescription, textStrategyDescription, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

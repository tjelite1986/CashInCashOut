// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetapp.R;
import com.google.android.material.card.MaterialCardView;
import com.google.android.material.chip.Chip;
import com.google.android.material.chip.ChipGroup;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentLoansBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final Button btnAddBorrowedEmpty;

  @NonNull
  public final Button btnAddLentEmpty;

  @NonNull
  public final MaterialCardView cardBorrowedSummary;

  @NonNull
  public final MaterialCardView cardLentSummary;

  @NonNull
  public final Chip chipActive;

  @NonNull
  public final Chip chipAll;

  @NonNull
  public final Chip chipBorrowed;

  @NonNull
  public final ChipGroup chipGroupFilter;

  @NonNull
  public final Chip chipLent;

  @NonNull
  public final Chip chipPaidBack;

  @NonNull
  public final FloatingActionButton fabBorrowed;

  @NonNull
  public final FloatingActionButton fabLent;

  @NonNull
  public final FloatingActionButton fabMain;

  @NonNull
  public final LinearLayout layoutEmptyState;

  @NonNull
  public final RecyclerView recyclerLoans;

  @NonNull
  public final TextView textBorrowedTotal;

  @NonNull
  public final TextView textEmptyMessage;

  @NonNull
  public final TextView textEmptyTitle;

  @NonNull
  public final TextView textLentTotal;

  private FragmentLoansBinding(@NonNull CoordinatorLayout rootView,
      @NonNull Button btnAddBorrowedEmpty, @NonNull Button btnAddLentEmpty,
      @NonNull MaterialCardView cardBorrowedSummary, @NonNull MaterialCardView cardLentSummary,
      @NonNull Chip chipActive, @NonNull Chip chipAll, @NonNull Chip chipBorrowed,
      @NonNull ChipGroup chipGroupFilter, @NonNull Chip chipLent, @NonNull Chip chipPaidBack,
      @NonNull FloatingActionButton fabBorrowed, @NonNull FloatingActionButton fabLent,
      @NonNull FloatingActionButton fabMain, @NonNull LinearLayout layoutEmptyState,
      @NonNull RecyclerView recyclerLoans, @NonNull TextView textBorrowedTotal,
      @NonNull TextView textEmptyMessage, @NonNull TextView textEmptyTitle,
      @NonNull TextView textLentTotal) {
    this.rootView = rootView;
    this.btnAddBorrowedEmpty = btnAddBorrowedEmpty;
    this.btnAddLentEmpty = btnAddLentEmpty;
    this.cardBorrowedSummary = cardBorrowedSummary;
    this.cardLentSummary = cardLentSummary;
    this.chipActive = chipActive;
    this.chipAll = chipAll;
    this.chipBorrowed = chipBorrowed;
    this.chipGroupFilter = chipGroupFilter;
    this.chipLent = chipLent;
    this.chipPaidBack = chipPaidBack;
    this.fabBorrowed = fabBorrowed;
    this.fabLent = fabLent;
    this.fabMain = fabMain;
    this.layoutEmptyState = layoutEmptyState;
    this.recyclerLoans = recyclerLoans;
    this.textBorrowedTotal = textBorrowedTotal;
    this.textEmptyMessage = textEmptyMessage;
    this.textEmptyTitle = textEmptyTitle;
    this.textLentTotal = textLentTotal;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentLoansBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentLoansBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_loans, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentLoansBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btn_add_borrowed_empty;
      Button btnAddBorrowedEmpty = ViewBindings.findChildViewById(rootView, id);
      if (btnAddBorrowedEmpty == null) {
        break missingId;
      }

      id = R.id.btn_add_lent_empty;
      Button btnAddLentEmpty = ViewBindings.findChildViewById(rootView, id);
      if (btnAddLentEmpty == null) {
        break missingId;
      }

      id = R.id.card_borrowed_summary;
      MaterialCardView cardBorrowedSummary = ViewBindings.findChildViewById(rootView, id);
      if (cardBorrowedSummary == null) {
        break missingId;
      }

      id = R.id.card_lent_summary;
      MaterialCardView cardLentSummary = ViewBindings.findChildViewById(rootView, id);
      if (cardLentSummary == null) {
        break missingId;
      }

      id = R.id.chip_active;
      Chip chipActive = ViewBindings.findChildViewById(rootView, id);
      if (chipActive == null) {
        break missingId;
      }

      id = R.id.chip_all;
      Chip chipAll = ViewBindings.findChildViewById(rootView, id);
      if (chipAll == null) {
        break missingId;
      }

      id = R.id.chip_borrowed;
      Chip chipBorrowed = ViewBindings.findChildViewById(rootView, id);
      if (chipBorrowed == null) {
        break missingId;
      }

      id = R.id.chip_group_filter;
      ChipGroup chipGroupFilter = ViewBindings.findChildViewById(rootView, id);
      if (chipGroupFilter == null) {
        break missingId;
      }

      id = R.id.chip_lent;
      Chip chipLent = ViewBindings.findChildViewById(rootView, id);
      if (chipLent == null) {
        break missingId;
      }

      id = R.id.chip_paid_back;
      Chip chipPaidBack = ViewBindings.findChildViewById(rootView, id);
      if (chipPaidBack == null) {
        break missingId;
      }

      id = R.id.fab_borrowed;
      FloatingActionButton fabBorrowed = ViewBindings.findChildViewById(rootView, id);
      if (fabBorrowed == null) {
        break missingId;
      }

      id = R.id.fab_lent;
      FloatingActionButton fabLent = ViewBindings.findChildViewById(rootView, id);
      if (fabLent == null) {
        break missingId;
      }

      id = R.id.fab_main;
      FloatingActionButton fabMain = ViewBindings.findChildViewById(rootView, id);
      if (fabMain == null) {
        break missingId;
      }

      id = R.id.layout_empty_state;
      LinearLayout layoutEmptyState = ViewBindings.findChildViewById(rootView, id);
      if (layoutEmptyState == null) {
        break missingId;
      }

      id = R.id.recycler_loans;
      RecyclerView recyclerLoans = ViewBindings.findChildViewById(rootView, id);
      if (recyclerLoans == null) {
        break missingId;
      }

      id = R.id.text_borrowed_total;
      TextView textBorrowedTotal = ViewBindings.findChildViewById(rootView, id);
      if (textBorrowedTotal == null) {
        break missingId;
      }

      id = R.id.text_empty_message;
      TextView textEmptyMessage = ViewBindings.findChildViewById(rootView, id);
      if (textEmptyMessage == null) {
        break missingId;
      }

      id = R.id.text_empty_title;
      TextView textEmptyTitle = ViewBindings.findChildViewById(rootView, id);
      if (textEmptyTitle == null) {
        break missingId;
      }

      id = R.id.text_lent_total;
      TextView textLentTotal = ViewBindings.findChildViewById(rootView, id);
      if (textLentTotal == null) {
        break missingId;
      }

      return new FragmentLoansBinding((CoordinatorLayout) rootView, btnAddBorrowedEmpty,
          btnAddLentEmpty, cardBorrowedSummary, cardLentSummary, chipActive, chipAll, chipBorrowed,
          chipGroupFilter, chipLent, chipPaidBack, fabBorrowed, fabLent, fabMain, layoutEmptyState,
          recyclerLoans, textBorrowedTotal, textEmptyMessage, textEmptyTitle, textLentTotal);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

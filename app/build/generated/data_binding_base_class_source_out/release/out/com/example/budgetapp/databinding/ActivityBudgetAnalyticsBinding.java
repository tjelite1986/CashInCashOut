// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ProgressBar;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.core.widget.NestedScrollView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetapp.R;
import com.github.mikephil.charting.charts.LineChart;
import com.github.mikephil.charting.charts.PieChart;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityBudgetAnalyticsBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final LineChart lineChartPerformance;

  @NonNull
  public final LineChart lineChartSpendingTrend;

  @NonNull
  public final PieChart pieChartBudgetStatus;

  @NonNull
  public final PieChart pieChartCategories;

  @NonNull
  public final ProgressBar progressBar;

  @NonNull
  public final NestedScrollView scrollView;

  @NonNull
  public final TextView textBudgetAccuracy;

  @NonNull
  public final TextView textBudgetsNearLimit;

  @NonNull
  public final TextView textBudgetsOnTrack;

  @NonNull
  public final TextView textBudgetsOverLimit;

  @NonNull
  public final TextView textEfficiencyRecommendation;

  @NonNull
  public final TextView textEfficiencyScore;

  @NonNull
  public final TextView textErrorMessage;

  @NonNull
  public final TextView textMostCommonPeriod;

  @NonNull
  public final TextView textPeriodRecommendation;

  @NonNull
  public final TextView textTotalBudgetAmount;

  @NonNull
  public final TextView textTotalBudgets;

  @NonNull
  public final TextView textTotalRemaining;

  @NonNull
  public final TextView textTotalSpent;

  @NonNull
  public final TextView textUtilizationRate;

  @NonNull
  public final Toolbar toolbar;

  private ActivityBudgetAnalyticsBinding(@NonNull CoordinatorLayout rootView,
      @NonNull LineChart lineChartPerformance, @NonNull LineChart lineChartSpendingTrend,
      @NonNull PieChart pieChartBudgetStatus, @NonNull PieChart pieChartCategories,
      @NonNull ProgressBar progressBar, @NonNull NestedScrollView scrollView,
      @NonNull TextView textBudgetAccuracy, @NonNull TextView textBudgetsNearLimit,
      @NonNull TextView textBudgetsOnTrack, @NonNull TextView textBudgetsOverLimit,
      @NonNull TextView textEfficiencyRecommendation, @NonNull TextView textEfficiencyScore,
      @NonNull TextView textErrorMessage, @NonNull TextView textMostCommonPeriod,
      @NonNull TextView textPeriodRecommendation, @NonNull TextView textTotalBudgetAmount,
      @NonNull TextView textTotalBudgets, @NonNull TextView textTotalRemaining,
      @NonNull TextView textTotalSpent, @NonNull TextView textUtilizationRate,
      @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.lineChartPerformance = lineChartPerformance;
    this.lineChartSpendingTrend = lineChartSpendingTrend;
    this.pieChartBudgetStatus = pieChartBudgetStatus;
    this.pieChartCategories = pieChartCategories;
    this.progressBar = progressBar;
    this.scrollView = scrollView;
    this.textBudgetAccuracy = textBudgetAccuracy;
    this.textBudgetsNearLimit = textBudgetsNearLimit;
    this.textBudgetsOnTrack = textBudgetsOnTrack;
    this.textBudgetsOverLimit = textBudgetsOverLimit;
    this.textEfficiencyRecommendation = textEfficiencyRecommendation;
    this.textEfficiencyScore = textEfficiencyScore;
    this.textErrorMessage = textErrorMessage;
    this.textMostCommonPeriod = textMostCommonPeriod;
    this.textPeriodRecommendation = textPeriodRecommendation;
    this.textTotalBudgetAmount = textTotalBudgetAmount;
    this.textTotalBudgets = textTotalBudgets;
    this.textTotalRemaining = textTotalRemaining;
    this.textTotalSpent = textTotalSpent;
    this.textUtilizationRate = textUtilizationRate;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityBudgetAnalyticsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityBudgetAnalyticsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_budget_analytics, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityBudgetAnalyticsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.line_chart_performance;
      LineChart lineChartPerformance = ViewBindings.findChildViewById(rootView, id);
      if (lineChartPerformance == null) {
        break missingId;
      }

      id = R.id.line_chart_spending_trend;
      LineChart lineChartSpendingTrend = ViewBindings.findChildViewById(rootView, id);
      if (lineChartSpendingTrend == null) {
        break missingId;
      }

      id = R.id.pie_chart_budget_status;
      PieChart pieChartBudgetStatus = ViewBindings.findChildViewById(rootView, id);
      if (pieChartBudgetStatus == null) {
        break missingId;
      }

      id = R.id.pie_chart_categories;
      PieChart pieChartCategories = ViewBindings.findChildViewById(rootView, id);
      if (pieChartCategories == null) {
        break missingId;
      }

      id = R.id.progress_bar;
      ProgressBar progressBar = ViewBindings.findChildViewById(rootView, id);
      if (progressBar == null) {
        break missingId;
      }

      id = R.id.scroll_view;
      NestedScrollView scrollView = ViewBindings.findChildViewById(rootView, id);
      if (scrollView == null) {
        break missingId;
      }

      id = R.id.text_budget_accuracy;
      TextView textBudgetAccuracy = ViewBindings.findChildViewById(rootView, id);
      if (textBudgetAccuracy == null) {
        break missingId;
      }

      id = R.id.text_budgets_near_limit;
      TextView textBudgetsNearLimit = ViewBindings.findChildViewById(rootView, id);
      if (textBudgetsNearLimit == null) {
        break missingId;
      }

      id = R.id.text_budgets_on_track;
      TextView textBudgetsOnTrack = ViewBindings.findChildViewById(rootView, id);
      if (textBudgetsOnTrack == null) {
        break missingId;
      }

      id = R.id.text_budgets_over_limit;
      TextView textBudgetsOverLimit = ViewBindings.findChildViewById(rootView, id);
      if (textBudgetsOverLimit == null) {
        break missingId;
      }

      id = R.id.text_efficiency_recommendation;
      TextView textEfficiencyRecommendation = ViewBindings.findChildViewById(rootView, id);
      if (textEfficiencyRecommendation == null) {
        break missingId;
      }

      id = R.id.text_efficiency_score;
      TextView textEfficiencyScore = ViewBindings.findChildViewById(rootView, id);
      if (textEfficiencyScore == null) {
        break missingId;
      }

      id = R.id.text_error_message;
      TextView textErrorMessage = ViewBindings.findChildViewById(rootView, id);
      if (textErrorMessage == null) {
        break missingId;
      }

      id = R.id.text_most_common_period;
      TextView textMostCommonPeriod = ViewBindings.findChildViewById(rootView, id);
      if (textMostCommonPeriod == null) {
        break missingId;
      }

      id = R.id.text_period_recommendation;
      TextView textPeriodRecommendation = ViewBindings.findChildViewById(rootView, id);
      if (textPeriodRecommendation == null) {
        break missingId;
      }

      id = R.id.text_total_budget_amount;
      TextView textTotalBudgetAmount = ViewBindings.findChildViewById(rootView, id);
      if (textTotalBudgetAmount == null) {
        break missingId;
      }

      id = R.id.text_total_budgets;
      TextView textTotalBudgets = ViewBindings.findChildViewById(rootView, id);
      if (textTotalBudgets == null) {
        break missingId;
      }

      id = R.id.text_total_remaining;
      TextView textTotalRemaining = ViewBindings.findChildViewById(rootView, id);
      if (textTotalRemaining == null) {
        break missingId;
      }

      id = R.id.text_total_spent;
      TextView textTotalSpent = ViewBindings.findChildViewById(rootView, id);
      if (textTotalSpent == null) {
        break missingId;
      }

      id = R.id.text_utilization_rate;
      TextView textUtilizationRate = ViewBindings.findChildViewById(rootView, id);
      if (textUtilizationRate == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityBudgetAnalyticsBinding((CoordinatorLayout) rootView, lineChartPerformance,
          lineChartSpendingTrend, pieChartBudgetStatus, pieChartCategories, progressBar, scrollView,
          textBudgetAccuracy, textBudgetsNearLimit, textBudgetsOnTrack, textBudgetsOverLimit,
          textEfficiencyRecommendation, textEfficiencyScore, textErrorMessage, textMostCommonPeriod,
          textPeriodRecommendation, textTotalBudgetAmount, textTotalBudgets, textTotalRemaining,
          textTotalSpent, textUtilizationRate, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

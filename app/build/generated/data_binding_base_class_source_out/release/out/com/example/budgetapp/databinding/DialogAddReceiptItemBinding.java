// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.AutoCompleteTextView;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetapp.R;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.textfield.MaterialAutoCompleteTextView;
import com.google.android.material.textfield.TextInputEditText;
import com.google.android.material.textfield.TextInputLayout;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogAddReceiptItemBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final AutoCompleteTextView autocompleteProductName;

  @NonNull
  public final AutoCompleteTextView autocompleteStoreCity;

  @NonNull
  public final AutoCompleteTextView autocompleteStoreName;

  @NonNull
  public final MaterialButton buttonAdd;

  @NonNull
  public final MaterialButton buttonAddStore;

  @NonNull
  public final MaterialButton buttonCancel;

  @NonNull
  public final MaterialButton buttonScanBarcode;

  @NonNull
  public final MaterialButton buttonSelectProduct;

  @NonNull
  public final AutoCompleteTextView dropdownStoreChain;

  @NonNull
  public final MaterialAutoCompleteTextView dropdownUnit;

  @NonNull
  public final TextInputEditText editDepositAmount;

  @NonNull
  public final TextInputEditText editDiscount;

  @NonNull
  public final TextInputEditText editProductSize;

  @NonNull
  public final TextInputEditText editQuantity;

  @NonNull
  public final TextInputEditText editUnitPrice;

  @NonNull
  public final SwitchMaterial switchHasDeposit;

  @NonNull
  public final TextInputLayout textInputDepositAmount;

  @NonNull
  public final TextInputLayout textInputDiscount;

  @NonNull
  public final TextInputLayout textInputProductName;

  @NonNull
  public final TextInputLayout textInputProductSize;

  @NonNull
  public final TextInputLayout textInputQuantity;

  @NonNull
  public final TextInputLayout textInputStoreChain;

  @NonNull
  public final TextInputLayout textInputStoreCity;

  @NonNull
  public final TextInputLayout textInputStoreName;

  @NonNull
  public final TextInputLayout textInputUnit;

  @NonNull
  public final TextInputLayout textInputUnitPrice;

  @NonNull
  public final TextView textTotalPreview;

  private DialogAddReceiptItemBinding(@NonNull LinearLayout rootView,
      @NonNull AutoCompleteTextView autocompleteProductName,
      @NonNull AutoCompleteTextView autocompleteStoreCity,
      @NonNull AutoCompleteTextView autocompleteStoreName, @NonNull MaterialButton buttonAdd,
      @NonNull MaterialButton buttonAddStore, @NonNull MaterialButton buttonCancel,
      @NonNull MaterialButton buttonScanBarcode, @NonNull MaterialButton buttonSelectProduct,
      @NonNull AutoCompleteTextView dropdownStoreChain,
      @NonNull MaterialAutoCompleteTextView dropdownUnit,
      @NonNull TextInputEditText editDepositAmount, @NonNull TextInputEditText editDiscount,
      @NonNull TextInputEditText editProductSize, @NonNull TextInputEditText editQuantity,
      @NonNull TextInputEditText editUnitPrice, @NonNull SwitchMaterial switchHasDeposit,
      @NonNull TextInputLayout textInputDepositAmount, @NonNull TextInputLayout textInputDiscount,
      @NonNull TextInputLayout textInputProductName, @NonNull TextInputLayout textInputProductSize,
      @NonNull TextInputLayout textInputQuantity, @NonNull TextInputLayout textInputStoreChain,
      @NonNull TextInputLayout textInputStoreCity, @NonNull TextInputLayout textInputStoreName,
      @NonNull TextInputLayout textInputUnit, @NonNull TextInputLayout textInputUnitPrice,
      @NonNull TextView textTotalPreview) {
    this.rootView = rootView;
    this.autocompleteProductName = autocompleteProductName;
    this.autocompleteStoreCity = autocompleteStoreCity;
    this.autocompleteStoreName = autocompleteStoreName;
    this.buttonAdd = buttonAdd;
    this.buttonAddStore = buttonAddStore;
    this.buttonCancel = buttonCancel;
    this.buttonScanBarcode = buttonScanBarcode;
    this.buttonSelectProduct = buttonSelectProduct;
    this.dropdownStoreChain = dropdownStoreChain;
    this.dropdownUnit = dropdownUnit;
    this.editDepositAmount = editDepositAmount;
    this.editDiscount = editDiscount;
    this.editProductSize = editProductSize;
    this.editQuantity = editQuantity;
    this.editUnitPrice = editUnitPrice;
    this.switchHasDeposit = switchHasDeposit;
    this.textInputDepositAmount = textInputDepositAmount;
    this.textInputDiscount = textInputDiscount;
    this.textInputProductName = textInputProductName;
    this.textInputProductSize = textInputProductSize;
    this.textInputQuantity = textInputQuantity;
    this.textInputStoreChain = textInputStoreChain;
    this.textInputStoreCity = textInputStoreCity;
    this.textInputStoreName = textInputStoreName;
    this.textInputUnit = textInputUnit;
    this.textInputUnitPrice = textInputUnitPrice;
    this.textTotalPreview = textTotalPreview;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogAddReceiptItemBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogAddReceiptItemBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_add_receipt_item, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogAddReceiptItemBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.autocomplete_product_name;
      AutoCompleteTextView autocompleteProductName = ViewBindings.findChildViewById(rootView, id);
      if (autocompleteProductName == null) {
        break missingId;
      }

      id = R.id.autocomplete_store_city;
      AutoCompleteTextView autocompleteStoreCity = ViewBindings.findChildViewById(rootView, id);
      if (autocompleteStoreCity == null) {
        break missingId;
      }

      id = R.id.autocomplete_store_name;
      AutoCompleteTextView autocompleteStoreName = ViewBindings.findChildViewById(rootView, id);
      if (autocompleteStoreName == null) {
        break missingId;
      }

      id = R.id.button_add;
      MaterialButton buttonAdd = ViewBindings.findChildViewById(rootView, id);
      if (buttonAdd == null) {
        break missingId;
      }

      id = R.id.button_add_store;
      MaterialButton buttonAddStore = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddStore == null) {
        break missingId;
      }

      id = R.id.button_cancel;
      MaterialButton buttonCancel = ViewBindings.findChildViewById(rootView, id);
      if (buttonCancel == null) {
        break missingId;
      }

      id = R.id.button_scan_barcode;
      MaterialButton buttonScanBarcode = ViewBindings.findChildViewById(rootView, id);
      if (buttonScanBarcode == null) {
        break missingId;
      }

      id = R.id.button_select_product;
      MaterialButton buttonSelectProduct = ViewBindings.findChildViewById(rootView, id);
      if (buttonSelectProduct == null) {
        break missingId;
      }

      id = R.id.dropdown_store_chain;
      AutoCompleteTextView dropdownStoreChain = ViewBindings.findChildViewById(rootView, id);
      if (dropdownStoreChain == null) {
        break missingId;
      }

      id = R.id.dropdown_unit;
      MaterialAutoCompleteTextView dropdownUnit = ViewBindings.findChildViewById(rootView, id);
      if (dropdownUnit == null) {
        break missingId;
      }

      id = R.id.edit_deposit_amount;
      TextInputEditText editDepositAmount = ViewBindings.findChildViewById(rootView, id);
      if (editDepositAmount == null) {
        break missingId;
      }

      id = R.id.edit_discount;
      TextInputEditText editDiscount = ViewBindings.findChildViewById(rootView, id);
      if (editDiscount == null) {
        break missingId;
      }

      id = R.id.edit_product_size;
      TextInputEditText editProductSize = ViewBindings.findChildViewById(rootView, id);
      if (editProductSize == null) {
        break missingId;
      }

      id = R.id.edit_quantity;
      TextInputEditText editQuantity = ViewBindings.findChildViewById(rootView, id);
      if (editQuantity == null) {
        break missingId;
      }

      id = R.id.edit_unit_price;
      TextInputEditText editUnitPrice = ViewBindings.findChildViewById(rootView, id);
      if (editUnitPrice == null) {
        break missingId;
      }

      id = R.id.switch_has_deposit;
      SwitchMaterial switchHasDeposit = ViewBindings.findChildViewById(rootView, id);
      if (switchHasDeposit == null) {
        break missingId;
      }

      id = R.id.text_input_deposit_amount;
      TextInputLayout textInputDepositAmount = ViewBindings.findChildViewById(rootView, id);
      if (textInputDepositAmount == null) {
        break missingId;
      }

      id = R.id.text_input_discount;
      TextInputLayout textInputDiscount = ViewBindings.findChildViewById(rootView, id);
      if (textInputDiscount == null) {
        break missingId;
      }

      id = R.id.text_input_product_name;
      TextInputLayout textInputProductName = ViewBindings.findChildViewById(rootView, id);
      if (textInputProductName == null) {
        break missingId;
      }

      id = R.id.text_input_product_size;
      TextInputLayout textInputProductSize = ViewBindings.findChildViewById(rootView, id);
      if (textInputProductSize == null) {
        break missingId;
      }

      id = R.id.text_input_quantity;
      TextInputLayout textInputQuantity = ViewBindings.findChildViewById(rootView, id);
      if (textInputQuantity == null) {
        break missingId;
      }

      id = R.id.text_input_store_chain;
      TextInputLayout textInputStoreChain = ViewBindings.findChildViewById(rootView, id);
      if (textInputStoreChain == null) {
        break missingId;
      }

      id = R.id.text_input_store_city;
      TextInputLayout textInputStoreCity = ViewBindings.findChildViewById(rootView, id);
      if (textInputStoreCity == null) {
        break missingId;
      }

      id = R.id.text_input_store_name;
      TextInputLayout textInputStoreName = ViewBindings.findChildViewById(rootView, id);
      if (textInputStoreName == null) {
        break missingId;
      }

      id = R.id.text_input_unit;
      TextInputLayout textInputUnit = ViewBindings.findChildViewById(rootView, id);
      if (textInputUnit == null) {
        break missingId;
      }

      id = R.id.text_input_unit_price;
      TextInputLayout textInputUnitPrice = ViewBindings.findChildViewById(rootView, id);
      if (textInputUnitPrice == null) {
        break missingId;
      }

      id = R.id.text_total_preview;
      TextView textTotalPreview = ViewBindings.findChildViewById(rootView, id);
      if (textTotalPreview == null) {
        break missingId;
      }

      return new DialogAddReceiptItemBinding((LinearLayout) rootView, autocompleteProductName,
          autocompleteStoreCity, autocompleteStoreName, buttonAdd, buttonAddStore, buttonCancel,
          buttonScanBarcode, buttonSelectProduct, dropdownStoreChain, dropdownUnit,
          editDepositAmount, editDiscount, editProductSize, editQuantity, editUnitPrice,
          switchHasDeposit, textInputDepositAmount, textInputDiscount, textInputProductName,
          textInputProductSize, textInputQuantity, textInputStoreChain, textInputStoreCity,
          textInputStoreName, textInputUnit, textInputUnitPrice, textTotalPreview);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

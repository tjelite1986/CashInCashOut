// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.Spinner;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetapp.R;
import com.google.android.material.appbar.MaterialToolbar;
import com.google.android.material.button.MaterialButton;
import com.google.android.material.switchmaterial.SwitchMaterial;
import com.google.android.material.textfield.TextInputEditText;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAddExpenseBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final MaterialButton btnCancel;

  @NonNull
  public final MaterialButton btnSave;

  @NonNull
  public final MaterialButton btnSelectDate;

  @NonNull
  public final MaterialButton btnSelectProduct;

  @NonNull
  public final MaterialButton buttonAddReceiptItem;

  @NonNull
  public final TextInputEditText etAmount;

  @NonNull
  public final TextInputEditText etDescription;

  @NonNull
  public final TextInputEditText etStore;

  @NonNull
  public final TextInputEditText etTitle;

  @NonNull
  public final LinearLayout layoutReceiptSummary;

  @NonNull
  public final RecyclerView recyclerReceiptItems;

  @NonNull
  public final Spinner spinnerCategory;

  @NonNull
  public final Spinner spinnerPaymentMethod;

  @NonNull
  public final Spinner spinnerRecurringType;

  @NonNull
  public final SwitchMaterial switchRecurring;

  @NonNull
  public final TextView textReceiptTotal;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivityAddExpenseBinding(@NonNull CoordinatorLayout rootView,
      @NonNull MaterialButton btnCancel, @NonNull MaterialButton btnSave,
      @NonNull MaterialButton btnSelectDate, @NonNull MaterialButton btnSelectProduct,
      @NonNull MaterialButton buttonAddReceiptItem, @NonNull TextInputEditText etAmount,
      @NonNull TextInputEditText etDescription, @NonNull TextInputEditText etStore,
      @NonNull TextInputEditText etTitle, @NonNull LinearLayout layoutReceiptSummary,
      @NonNull RecyclerView recyclerReceiptItems, @NonNull Spinner spinnerCategory,
      @NonNull Spinner spinnerPaymentMethod, @NonNull Spinner spinnerRecurringType,
      @NonNull SwitchMaterial switchRecurring, @NonNull TextView textReceiptTotal,
      @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.btnCancel = btnCancel;
    this.btnSave = btnSave;
    this.btnSelectDate = btnSelectDate;
    this.btnSelectProduct = btnSelectProduct;
    this.buttonAddReceiptItem = buttonAddReceiptItem;
    this.etAmount = etAmount;
    this.etDescription = etDescription;
    this.etStore = etStore;
    this.etTitle = etTitle;
    this.layoutReceiptSummary = layoutReceiptSummary;
    this.recyclerReceiptItems = recyclerReceiptItems;
    this.spinnerCategory = spinnerCategory;
    this.spinnerPaymentMethod = spinnerPaymentMethod;
    this.spinnerRecurringType = spinnerRecurringType;
    this.switchRecurring = switchRecurring;
    this.textReceiptTotal = textReceiptTotal;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAddExpenseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAddExpenseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_add_expense, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAddExpenseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.btnCancel;
      MaterialButton btnCancel = ViewBindings.findChildViewById(rootView, id);
      if (btnCancel == null) {
        break missingId;
      }

      id = R.id.btnSave;
      MaterialButton btnSave = ViewBindings.findChildViewById(rootView, id);
      if (btnSave == null) {
        break missingId;
      }

      id = R.id.btnSelectDate;
      MaterialButton btnSelectDate = ViewBindings.findChildViewById(rootView, id);
      if (btnSelectDate == null) {
        break missingId;
      }

      id = R.id.btnSelectProduct;
      MaterialButton btnSelectProduct = ViewBindings.findChildViewById(rootView, id);
      if (btnSelectProduct == null) {
        break missingId;
      }

      id = R.id.button_add_receipt_item;
      MaterialButton buttonAddReceiptItem = ViewBindings.findChildViewById(rootView, id);
      if (buttonAddReceiptItem == null) {
        break missingId;
      }

      id = R.id.etAmount;
      TextInputEditText etAmount = ViewBindings.findChildViewById(rootView, id);
      if (etAmount == null) {
        break missingId;
      }

      id = R.id.etDescription;
      TextInputEditText etDescription = ViewBindings.findChildViewById(rootView, id);
      if (etDescription == null) {
        break missingId;
      }

      id = R.id.etStore;
      TextInputEditText etStore = ViewBindings.findChildViewById(rootView, id);
      if (etStore == null) {
        break missingId;
      }

      id = R.id.etTitle;
      TextInputEditText etTitle = ViewBindings.findChildViewById(rootView, id);
      if (etTitle == null) {
        break missingId;
      }

      id = R.id.layout_receipt_summary;
      LinearLayout layoutReceiptSummary = ViewBindings.findChildViewById(rootView, id);
      if (layoutReceiptSummary == null) {
        break missingId;
      }

      id = R.id.recycler_receipt_items;
      RecyclerView recyclerReceiptItems = ViewBindings.findChildViewById(rootView, id);
      if (recyclerReceiptItems == null) {
        break missingId;
      }

      id = R.id.spinnerCategory;
      Spinner spinnerCategory = ViewBindings.findChildViewById(rootView, id);
      if (spinnerCategory == null) {
        break missingId;
      }

      id = R.id.spinnerPaymentMethod;
      Spinner spinnerPaymentMethod = ViewBindings.findChildViewById(rootView, id);
      if (spinnerPaymentMethod == null) {
        break missingId;
      }

      id = R.id.spinnerRecurringType;
      Spinner spinnerRecurringType = ViewBindings.findChildViewById(rootView, id);
      if (spinnerRecurringType == null) {
        break missingId;
      }

      id = R.id.switchRecurring;
      SwitchMaterial switchRecurring = ViewBindings.findChildViewById(rootView, id);
      if (switchRecurring == null) {
        break missingId;
      }

      id = R.id.text_receipt_total;
      TextView textReceiptTotal = ViewBindings.findChildViewById(rootView, id);
      if (textReceiptTotal == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityAddExpenseBinding((CoordinatorLayout) rootView, btnCancel, btnSave,
          btnSelectDate, btnSelectProduct, buttonAddReceiptItem, etAmount, etDescription, etStore,
          etTitle, layoutReceiptSummary, recyclerReceiptItems, spinnerCategory,
          spinnerPaymentMethod, spinnerRecurringType, switchRecurring, textReceiptTotal, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetapp.R;
import com.google.android.material.card.MaterialCardView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemProductPriceBinding implements ViewBinding {
  @NonNull
  private final MaterialCardView rootView;

  @NonNull
  public final Button buttonDelete;

  @NonNull
  public final Button buttonEdit;

  @NonNull
  public final TextView textViewCampaignPrice;

  @NonNull
  public final TextView textViewLastSeen;

  @NonNull
  public final TextView textViewPrice;

  @NonNull
  public final TextView textViewStoreChain;

  @NonNull
  public final TextView textViewStoreName;

  private ItemProductPriceBinding(@NonNull MaterialCardView rootView, @NonNull Button buttonDelete,
      @NonNull Button buttonEdit, @NonNull TextView textViewCampaignPrice,
      @NonNull TextView textViewLastSeen, @NonNull TextView textViewPrice,
      @NonNull TextView textViewStoreChain, @NonNull TextView textViewStoreName) {
    this.rootView = rootView;
    this.buttonDelete = buttonDelete;
    this.buttonEdit = buttonEdit;
    this.textViewCampaignPrice = textViewCampaignPrice;
    this.textViewLastSeen = textViewLastSeen;
    this.textViewPrice = textViewPrice;
    this.textViewStoreChain = textViewStoreChain;
    this.textViewStoreName = textViewStoreName;
  }

  @Override
  @NonNull
  public MaterialCardView getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemProductPriceBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemProductPriceBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_product_price, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemProductPriceBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonDelete;
      Button buttonDelete = ViewBindings.findChildViewById(rootView, id);
      if (buttonDelete == null) {
        break missingId;
      }

      id = R.id.buttonEdit;
      Button buttonEdit = ViewBindings.findChildViewById(rootView, id);
      if (buttonEdit == null) {
        break missingId;
      }

      id = R.id.textViewCampaignPrice;
      TextView textViewCampaignPrice = ViewBindings.findChildViewById(rootView, id);
      if (textViewCampaignPrice == null) {
        break missingId;
      }

      id = R.id.textViewLastSeen;
      TextView textViewLastSeen = ViewBindings.findChildViewById(rootView, id);
      if (textViewLastSeen == null) {
        break missingId;
      }

      id = R.id.textViewPrice;
      TextView textViewPrice = ViewBindings.findChildViewById(rootView, id);
      if (textViewPrice == null) {
        break missingId;
      }

      id = R.id.textViewStoreChain;
      TextView textViewStoreChain = ViewBindings.findChildViewById(rootView, id);
      if (textViewStoreChain == null) {
        break missingId;
      }

      id = R.id.textViewStoreName;
      TextView textViewStoreName = ViewBindings.findChildViewById(rootView, id);
      if (textViewStoreName == null) {
        break missingId;
      }

      return new ItemProductPriceBinding((MaterialCardView) rootView, buttonDelete, buttonEdit,
          textViewCampaignPrice, textViewLastSeen, textViewPrice, textViewStoreChain,
          textViewStoreName);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}

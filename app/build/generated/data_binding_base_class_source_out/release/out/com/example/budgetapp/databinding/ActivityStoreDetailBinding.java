// Generated by view binder compiler. Do not edit!
package com.example.budgetapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.budgetapp.R;
import com.google.android.material.appbar.MaterialToolbar;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityStoreDetailBinding implements ViewBinding {
  @NonNull
  private final CoordinatorLayout rootView;

  @NonNull
  public final LinearLayout emptyStateLayout;

  @NonNull
  public final LinearLayout layoutOpeningHours;

  @NonNull
  public final LinearLayout layoutSavings;

  @NonNull
  public final LinearLayout layoutStoreAddress;

  @NonNull
  public final LinearLayout layoutStorePhone;

  @NonNull
  public final LinearLayout layoutStoreWebsite;

  @NonNull
  public final RecyclerView recyclerViewProducts;

  @NonNull
  public final TextView textOpeningHours;

  @NonNull
  public final TextView textProductCount;

  @NonNull
  public final TextView textRecommendedItems;

  @NonNull
  public final TextView textStoreAddress;

  @NonNull
  public final TextView textStoreChain;

  @NonNull
  public final TextView textStoreName;

  @NonNull
  public final TextView textStorePhone;

  @NonNull
  public final TextView textStoreWebsite;

  @NonNull
  public final TextView textTotalSavings;

  @NonNull
  public final MaterialToolbar toolbar;

  private ActivityStoreDetailBinding(@NonNull CoordinatorLayout rootView,
      @NonNull LinearLayout emptyStateLayout, @NonNull LinearLayout layoutOpeningHours,
      @NonNull LinearLayout layoutSavings, @NonNull LinearLayout layoutStoreAddress,
      @NonNull LinearLayout layoutStorePhone, @NonNull LinearLayout layoutStoreWebsite,
      @NonNull RecyclerView recyclerViewProducts, @NonNull TextView textOpeningHours,
      @NonNull TextView textProductCount, @NonNull TextView textRecommendedItems,
      @NonNull TextView textStoreAddress, @NonNull TextView textStoreChain,
      @NonNull TextView textStoreName, @NonNull TextView textStorePhone,
      @NonNull TextView textStoreWebsite, @NonNull TextView textTotalSavings,
      @NonNull MaterialToolbar toolbar) {
    this.rootView = rootView;
    this.emptyStateLayout = emptyStateLayout;
    this.layoutOpeningHours = layoutOpeningHours;
    this.layoutSavings = layoutSavings;
    this.layoutStoreAddress = layoutStoreAddress;
    this.layoutStorePhone = layoutStorePhone;
    this.layoutStoreWebsite = layoutStoreWebsite;
    this.recyclerViewProducts = recyclerViewProducts;
    this.textOpeningHours = textOpeningHours;
    this.textProductCount = textProductCount;
    this.textRecommendedItems = textRecommendedItems;
    this.textStoreAddress = textStoreAddress;
    this.textStoreChain = textStoreChain;
    this.textStoreName = textStoreName;
    this.textStorePhone = textStorePhone;
    this.textStoreWebsite = textStoreWebsite;
    this.textTotalSavings = textTotalSavings;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public CoordinatorLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityStoreDetailBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityStoreDetailBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_store_detail, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityStoreDetailBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.empty_state_layout;
      LinearLayout emptyStateLayout = ViewBindings.findChildViewById(rootView, id);
      if (emptyStateLayout == null) {
        break missingId;
      }

      id = R.id.layout_opening_hours;
      LinearLayout layoutOpeningHours = ViewBindings.findChildViewById(rootView, id);
      if (layoutOpeningHours == null) {
        break missingId;
      }

      id = R.id.layout_savings;
      LinearLayout layoutSavings = ViewBindings.findChildViewById(rootView, id);
      if (layoutSavings == null) {
        break missingId;
      }

      id = R.id.layout_store_address;
      LinearLayout layoutStoreAddress = ViewBindings.findChildViewById(rootView, id);
      if (layoutStoreAddress == null) {
        break missingId;
      }

      id = R.id.layout_store_phone;
      LinearLayout layoutStorePhone = ViewBindings.findChildViewById(rootView, id);
      if (layoutStorePhone == null) {
        break missingId;
      }

      id = R.id.layout_store_website;
      LinearLayout layoutStoreWebsite = ViewBindings.findChildViewById(rootView, id);
      if (layoutStoreWebsite == null) {
        break missingId;
      }

      id = R.id.recycler_view_products;
      RecyclerView recyclerViewProducts = ViewBindings.findChildViewById(rootView, id);
      if (recyclerViewProducts == null) {
        break missingId;
      }

      id = R.id.text_opening_hours;
      TextView textOpeningHours = ViewBindings.findChildViewById(rootView, id);
      if (textOpeningHours == null) {
        break missingId;
      }

      id = R.id.text_product_count;
      TextView textProductCount = ViewBindings.findChildViewById(rootView, id);
      if (textProductCount == null) {
        break missingId;
      }

      id = R.id.text_recommended_items;
      TextView textRecommendedItems = ViewBindings.findChildViewById(rootView, id);
      if (textRecommendedItems == null) {
        break missingId;
      }

      id = R.id.text_store_address;
      TextView textStoreAddress = ViewBindings.findChildViewById(rootView, id);
      if (textStoreAddress == null) {
        break missingId;
      }

      id = R.id.text_store_chain;
      TextView textStoreChain = ViewBindings.findChildViewById(rootView, id);
      if (textStoreChain == null) {
        break missingId;
      }

      id = R.id.text_store_name;
      TextView textStoreName = ViewBindings.findChildViewById(rootView, id);
      if (textStoreName == null) {
        break missingId;
      }

      id = R.id.text_store_phone;
      TextView textStorePhone = ViewBindings.findChildViewById(rootView, id);
      if (textStorePhone == null) {
        break missingId;
      }

      id = R.id.text_store_website;
      TextView textStoreWebsite = ViewBindings.findChildViewById(rootView, id);
      if (textStoreWebsite == null) {
        break missingId;
      }

      id = R.id.text_total_savings;
      TextView textTotalSavings = ViewBindings.findChildViewById(rootView, id);
      if (textTotalSavings == null) {
        break missingId;
      }

      id = R.id.toolbar;
      MaterialToolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityStoreDetailBinding((CoordinatorLayout) rootView, emptyStateLayout,
          layoutOpeningHours, layoutSavings, layoutStoreAddress, layoutStorePhone,
          layoutStoreWebsite, recyclerViewProducts, textOpeningHours, textProductCount,
          textRecommendedItems, textStoreAddress, textStoreChain, textStoreName, textStorePhone,
          textStoreWebsite, textTotalSavings, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
